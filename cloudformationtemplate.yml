Resources:
  WeatherData:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: Weather
      AttributeDefinitions:
        - AttributeName: city
          AttributeType: S
      KeySchema:
        - AttributeName: city
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain

  WeatherIamUserRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  WeatherIamUserPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'dynamodb:BatchGetItem'
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:ConditionCheckItem'
              - 'dynamodb:DeleteItem'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:GetItem'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:PutItem'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:UpdateItem'
            Effect: Allow
            Resource:
              - !GetAtt 
                - WeatherData
                - Arn
              - !Ref 'AWS::NoValue'
        Version: 2012-10-17
      PolicyName: WeatherIamUserPolicy
      Roles:
        - !Ref WeatherIamUserRole

  WeatherUpdatesLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: weather11 
        S3Key: data-0.0.1-SNAPSHOT.jar
      Environment:
        Variables:
          TABLE_NAME: !Ref WeatherData
      Handler: com.example.weatherservice.LambdaHandler::handleRequest
      MemorySize: 1024
      Role: !GetAtt 
        - WeatherIamUserRole
        - Arn
      Runtime: java17
      Timeout: 30
    DependsOn:
      - WeatherIamUserPolicy
      - WeatherIamUserRole

  LambdaInvokePermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref WeatherUpdatesLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: '608116663849'

  WeatherRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: This service serves weather data.
      Name: Weather-app-rest-api

  WeatherApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - WeatherRestApi
        - RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref WeatherRestApi

  WeatherUpdatesApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 
          'arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WeatherUpdatesLambdaFunction.Arn}/invocations'
      ResourceId: !Ref WeatherApiResource
      RestApiId: !Ref WeatherRestApi

  WeatherApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: This service serves weather data.
      RestApiId: !Ref WeatherRestApi
    DependsOn:
      - WeatherUpdatesApiMethod
      - WeatherApiResource

  WeatherApiDeploymentStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref WeatherApiDeployment
      RestApiId: !Ref WeatherRestApi
      StageName: prod

  WeatherApiEventRulePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt WeatherUpdatesLambdaFunction.Arn
      Principal: apidestinations.events.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':events:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - 'rule'
          - /
          - '*'

  WeatherEventBus:
    Type: 'AWS::Events::EventBus'
    Properties:
      Name: WeatherEventBus

  WeatherEventBridgeRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt 
            - WeatherUpdatesLambdaFunction
            - Arn
          Id: Target0

  WeatherEventRulePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 
        - WeatherUpdatesLambdaFunction
        - Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt 
        - WeatherEventBridgeRule
        - Arn

Outputs:
  WeatherApiEndpoint:
    Value: !Sub 
      'https://${WeatherRestApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${WeatherApiDeploymentStage}/'
